{
    "title": "Web APIs",
    "definition": "An API (application Programming Interface) is a set of methods, properties, events, and URLs that developers use to interact with components of a user's web browser. Web APIs are built into the web browser and contain methods that allow us to manipulate a webpage using JavaScript.",
    "background": "A web browser, or browser, is a program used to access information on the World Wide Web. Browsers access information on the web. Every web page is effectively a series of files sitting on a server somewhere. Browsers use the URL (Uniform Resource Locator) to retrieve resources from a web server and display them on a user's device. The client (user/browser) has an IP address associated with it. For example, when you log into Netflix for example from your browser, the browser (on your behalf) sends a request to Netflix's server to access its site. The server then responds and serves up the files necessary (HTML, CSS, JS, etc) to access the site, thus fulfilling the request.",
    "notesByTopic": {
        "DOM": "DOM stands for the Document Object Model. When we open a webpage, the browser creates a tree of objects that represent the opened page. That tree of objects is the DOM.",
        "this": "The window object represents the browser window. The window object contains the document as a property. Console logging window.document returns the html DOM for the webpage. You can also log the body of the html document by console logging document.body.",
        "methods": {
            "getElementById": "To access an element by it's id, use document.getElementById('id-name'); Subsequently, the children of that element can be selected by chaining .children[index] and so on.",
            "querySelectorAll": "To access multiple elements, use .querySelectorAll(). For example, to select all div elements, use document.querySelectorAll('div');",
            "querySelector": "To access an element by id, you can use .querySelector('#id-name');",
            "setAttribue": "It is a method used to change the attribute of the html element(s) we choose; It takes in two parameters, the first parameter is the attribute that we want to change, and the second parameter is the type of attribue and the new value of that attribute. Example, .setAttribue('style', 'font-size: 40px;') which changes the font size of the selected element(s). To change mutliple attribute types, separate each one with a space. For example, .setAttribue('style', 'font-size: 30px; font-weight: bold; text-decoration: underline;'). The setAttribue method can be used to provide the image source. Example, .setAttribue('src', './assets/images/image.jpeg'). Note: in order to set the attribute of many elements (such as an array of elements as a result of using querySelectorAll), a for loop is needed to set the attribute to every element.",
            "createElement": "If we want to dynamically create an html element, use the createElement(htmlTag) method which takes a parameter equal to the html tag name we want created.",
            "appendChild": "The appendChild() method works along with the createElement() method to append or add the newly created element to the html page. This method is chained to the html tag we want the newly made element added. For example, if we say body.appendChild(newElement), the newElement will be added to the body of the html.",
            "textContent": "This is used to add text to an HTML element. Syntax element.textContent = 'The Text I Want'. This returns the inner text content of ALL children of the node it is called on.",
            "innerHTML": "This property is the easiest to differentiate from the other two. .innerHTML, like .textContent, returns the inner text content of all child nodes. The difference is that .innerHTML returns the non-rendered text content as well as the HTML tags of the child nodes. ",
            "innerText": "renders text with CSS attributes",
            "mathces": "This method is used with HTML elements to find and match a specific HTML element. For example, if we use querySelector to store a div that contains multiple elements, we can use the .matches method to select a specific element from that div.",
            "value": "Used to retrieve the data or value of an HTML element."
        },
        "timerAndIntervals": {
            "setInterval": "A JavaScript built-in method. It takes two parameters, the first is a function that we want executed during the time interval, the second is the time interval specified in milliseconds.",
            "clearInterval": "Stops the action in the function inside setInterval at a specified time."
        },
        "addEventListener": "It is a built-in JavaScript method that allows us to listen to when an event occurs. It takes in two parameters, the first is the event type that we are listening to, and the second is a function that we want performed when the event happens.",
        "preventDefault": "The event.preventDefault() is a method that prevents the page from reloading when a button is submitted.",
        "target": "A click event has a target that is equal to the html element that is clicked. This can be attained by using event.target,",
        "keyboardEvent": {
            "intro": "Keyboard events are a type of event listeners that listen for events other than clicking.",
            "change": "Used as the type of event in an event listener with drop down options.",
            "keydown": "Also used as the type of event in an event listener when a keyboard key is pressed down. When used in an event listener, an object named key is attached to the event object, thus the key pressed should be stored under 'event.key'.",
            "keyup": "similar to keydown, this event is triggered when the pressed key is released."
        },
        "eventBubbling": "In the case of a button that is nested inside of an element that has another button, when a click event occurs, it will traverse up the DOM and create a chain of events. To prevent this, we just need to add the method event.stopPropagation();",
        "dataAttributes": {
            "intro": "It could be used to store information in the HTML tag. The data attributes can be accessed inside the selected HTML element using 'dataset'.",
            "dataAnimate": "An example of a data attribute that is used on an image tag to animate an image.",
            "dataStill": "An example of a data attribute that is used on an image tag to make a gif static.",
            "dataState": "Defines the current state of the different data attribute we are using. If it's value is set to 'still', then data-still would be active, and so on.",
            "getAttribute": "Interfaces with HTML elements and returns the value of the specificed attribute as a parameter of the method. For example, element.getAttribute('data-state') would return the value of the data attribute data-state the element has."
        },
        "localStorage": {
            "intro": "local stroage can be used to store data in the browser. The below methods show how key value pairs are stored locally as data sets.",
            "setItem": "Used to store data locally in the browser. Takes in two parameters, the first is the name of the data, and the second is the actual data.",
            "getItem": "Used to access data that is stored locally. Takes in one parameter that is equal to the name of the data.",
            "objects": "objects can be stored locally as well as key value pairs. We do this by using a couple JSON methods: we use JSON.stringify to convert the object into a string when using localStorage.setItem. Then when we want to retrieve the stringified object, we use the method JSON.parse to convert the stringified object back to an object.",
            "init": "The init() function fires when the page is loaded. When it is executed, the code inside of it will run first. Since it is a function, it must be called outside of the function to be executed. The init functions dictates what functions run when the page loads."
        }
    }
}