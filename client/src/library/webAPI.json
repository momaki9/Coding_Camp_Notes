{
    "title": "Web APIs",
    "definition": "An API (application Programming Interface) is a set of methods, properties, events, and URLs that developers use to interact with components of a user's web browser. Web APIs are built into the web browser and contain methods that allow us to manipulate a webpage using JavaScript.",
    "background": "A web browser, or browser, is a program used to access information on the World Wide Web. Browsers access information on the web. Every web page is effectively a series of files sitting on a server somewhere. Browsers use the URL (Uniform Resource Locator) to retrieve resources from a web server and display them on a user's device. The client (user/browser) has an IP address associated with it. For example, when you log into Netflix for example from your browser, the browser (on your behalf) sends a request to Netflix's server to access its site. The server then responds and serves up the files necessary (HTML, CSS, JS, etc) to access the site, thus fulfilling the request.",
    "notesByTopic": {
        "DOM": "DOM stands for the Document Object Model. When we open a webpage, the browser creates a tree of objects that represent the opened page. That tree of objects is the DOM.",
        "this": "The window object represents the browser window. The window object contains the document as a property. Console logging window.document returns the html DOM for the webpage. You can also log the body of the html document by console logging document.body.",
        "methods": {
            "getElementById": "To access an element by it's id, use document.getElementById('id-name'); Subsequently, the children of that element can be selected by chaining .children[index] and so on.",
            "querySelectorAll": "To access multiple elements, use .querySelectorAll(). For example, to select all div elements, use document.querySelectorAll('div');",
            "querySelector": "To access an element by id, you can use .querySelector('#id-name');",
            "setAttribue": "It is a method used to change the attribute of the html element(s) we choose; It takes in two parameters, the first parameter is the attribute that we want to change, and the second parameter is the type of attribue and the new value of that attribute. Example, .setAttribue('style', 'font-size: 40px;') which changes the font size of the selected element(s). To change mutliple attribute types, separate each one with a space. For example, .setAttribue('style', 'font-size: 30px; font-weight: bold; text-decoration: underline;'). The setAttribue method can be used to provide the image source. Example, .setAttribue('src', './assets/images/image.jpeg'). Note: in order to set the attribute of many elements (such as an array of elements as a result of using querySelectorAll), a for loop is needed to set the attribute to every element.",
            "createElement": "If we want to dynamically create an html element, use the createElement(htmlTag) method which takes a parameter equal to the html tag name we want created.",
            "appendChild": "The appendChild() method works along with the createElement() method to append or add the newly created element to the html page. This method is chained to the html tag we want the newly made element added. For example, if we say body.appendChild(newElement), the newElement will be added to the body of the html."
        }
    }
}