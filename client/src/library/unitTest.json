{
    "title": "Unit Tests",
    "altTitle": "Test Driven Development",
    "background": "It is a process or methodology that we should be creating tests before writing code, OR ensure that we write tests to  ensure the code behaves as expected. It is intended for the tests to be written before the code is written, so that the tests drives the code needed. Unit test is a common type of tests written to ensure the reliablilty of the code, or validate the expected behavior of functions. Another type of test written is integration test that involves looking at functions or methods that interact with data, interfaces with user input, or interacts with data from a database. The third type is end-to-end test which tests specifically the application from a user standpoint.",
    "quote": "How do I determine if my code is working or not; succeeding or failing",
    "devDependencies": "Jest - a node testing package (widely used).",
    "scripts": "'test': 'jest --colors': this will allow us to run testing from terminal by using the command `npm run test`. (runs the jest command with the colors argument which gives green when tests pass and red when tests fail)",
    "notes": "Directory structure: we have a folder (directory) called test which contains the test file (typically named as ___.test.js where ___ represents the JS file name that the tests correspond to.) This naming convesion is very important. Also, the JS file that we are writing the test for need to be imported in the test script file. All of the tests are nested under a parent 'describe'. This parent describe statement to contain other describe statements. The parent describe statement contains the string equal to the name testing suite as the first argument, while the second arguemnt is a function that contains the other describe statement(s). In other words, the first paramenter is the name (string) of the test we are writing. Inside the function, we have an it and expect statements that describe how the test behaves. 'It' also has two arguemnts, with the first argument being the string value that describes what should happen when the test is run, and the second argument is a function containing the 'expect' statement (logic of the test). The 'expect' keyword takes in the logic argument (in parenthesis) and attach it to the '.toEqual' method.",
    "documentation": ""
}