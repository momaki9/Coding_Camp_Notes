{
    "title": "JavaScript",
    "background": "",
    "quote": "DRY - Don't Repeat Yourself!",
    "setup": "JavaScript can be writtin inside the HTML file (not recommended) inside <script></script> tags. Alternatively, we can have an external JavaScript file (with .js extension) that contains our JavaScript code and link it using a source attribute inside <script></script> tags. It is recommended to place the script tags towards the end of the body, or as the last line in the body of the HTML. We want the JavaScript to be the last thing to load, contrary to CSS where we want that to load first.",
    "tips": {
        "liveServer": "For VS Code, using Live Server extension is very helpful during development.",
        "newLine": "The \n syntax creates a new line when it comes to printing strings."
    },
    "notes": {
        "variables": "Variables can be declared using the var key word, followed by the variable name. To assign the variable a value, use the equal sign after the variable name. (e.g. var myVariable = '12x') Variables can have their values changed or reassigned. This can be done by calling on a variable that's already been assigned/has a value then giving it a different value (e.g. myVariable = '12x + 3';).",
        "dataType": "Some examples of primitive data types include string, number, boolean, undefined, and null. We can also reassign data types. JavaScript is a `losely-typed langauge` meaning that when a variable is declared, we do not have to specify the variable type. It also means that when variables are reassigned, their data types could also be changed.",
        "arrays": "JavaScript, like many other languages, is a zero-based index langauge, meaning we start counting at 0 not 1. We can use the index value of the element in the array to change that value or manipulate it in some way. Another property of arrays is that they have a length that corresponds to the number of elements in that array. Length is a built-in JavaScript function/method and does not require any arguments. This can be accessed by using the dot notation followed by length right after the array's name (e.g. var myArray = [ 1, 3, 5, 7]; console.log(myArray.length) // should return 4. Arrays are ordered lists!",
        "objects": "Values inside objects can be accessed by either using dot notation or bracket notation. When using the dot notation, start with the object name, dot, and then use the name of the key. For bracket notation, use the object name then brackets. Inside the brackets, include the key name inside quotes. If the key value is an array, include a second set of brackets after the first one to include the index value of the element in the array. (Quotes are not needed for the index value). As a side note, dot notation would not be able to access values if the key name starts with a number or symbol thus the bracket notation would be used in this specific scenario. (It is best practice to avoid using numbers or symbols in naming variables, objects, keys, etc) In JavaScript, you can chain dot notation to access embeded values inside objects, or specific elements inside arrays. Also you could chain on built-in methods for arrays or strings. In addition, custom methods or functions can be written or stored inside objects.",
        "this": "The default keyword 'this' refers to the global object; In a browser, the global object is the window. When the keyword 'this' is used inside of an object, 'this' belongs to that object."
    },
    "tools": {
        "concatenation": {
            "methodOne": "Method 1: Using the plus sign. Example: 'My expression is ' + myVariable // returns 'My expression is 12x + 3'; Note the space between is and the quote which is needed in this method of concatenation.",
            "methodTwo": "Method 2: Using a comma instead of a plus sign. Example 'My expression is ', myVariable // also returns 'My expression is 12x + 3'",
            "methodThree": "Method 3: Using tick marks ``. Variables are enclosed in ${} and everything outside is interpreted as a string. For example, console.log(`My expression is ${myVariable}`) // should also return 'My expression is 12x + 3'. This method is superior since we don't have to worry about adding plus signs or space between the variables and string. Also in this syntax we don't have to worry about changing any data types as this is done during run time."
        },
        "consoleLog": "Console.log is a very useful tool to test code during development. To see the output of this tool, open the HTML file in the browser then open the Console (Right click + Inspect then click on Console tab, or Press Control + Shift + J).",
        "typeof": "typeof is a Javascript function that works with console.log to log the data type of the variable being passed into it. For example, console.log(typeof myVariable) should return 'string'.",
        "forLoops": "For Loops are a way to execute a code of block more than once, usually dictated by the iterater (i). For loops can be used to iterate over elements inside arrays. Example: for (var i = 0; i < 5; i++) { console.log(`This is the current value of i: ${i}.` }. This would print out the statement from i = 0 till i = 4. In other words, the logic within the for loop will run as long as the conditional statement 'i < 5' evaluates true. i++ increases the value of i by 1 after each loop.",
        "functions": {
            "definition": "One way functions are defined is by using the keyword function followed by the name of the function, a set of parenthesis, and a set of curly braces. Inside the curly braces goes the logic of the function. Example: function doSomething(){console.log('this is a function') return;}; Return stops the logic of the function. Another way (function expression) to declare functions: var doSomething = function(){console.log('this is a function expression') return;};. Functions need to be called to be executed. Functions are called by their name followed by parenthesis. Functions can be called multiple times.",
            "parameters": "Allows us to pass data (variables or parameters) into our function as part of its logic. They are defined inside the parenthesis of the function. Parameters can be different data types and can have default values. Order matters! Parameters are also refered to as arguments.",
            "scope": "Function declarations are initialized at compile time and are available once the page loads. This allows us to call the function in the code above the actual function declaration. On the contrary, function expressions are NOT initialized at compile time and can only be called after they have been defined in the code. Variables delared outside of functions (or any curly braces) are called global variables and are available everywhere in the code. Variables declared inside functions are only accessible inside that function (local scope). Shadowing happens when the same variable is used in the local and global scope."
        },
        "methods": {
            "built-in": "Built-in methods are provided by the JavaScript coding language to make executing certain sets of instructions much easier and efficient.",
            "examples": {
                "arrayMethods": {
                    "sort": ".sort() permanently changes the array, allows us to sort the array (alphabetical order = default?)",
                    "push": ".push('arg') adds an element at the end of an existing array. Takes in an argument (arg).",
                    "slice": ".slice('start index', 'stop index') returns selected elements of an existing array as a new array. This takes in two arguments which represent the index values of the elements we want from the array. For example: var myArray = ['Joe', 'Murr', 'Sal', 'Q']; console.log(myArray.slice(0, 2)) should return the array: ['Joe', 'Murr']; Notice that the element corresponding to the stop index is NOT included in the new array. Not that the original array remains unchanged.",
                    "splice": "allows us to remove a specified element from an array.",
                    "unshift": ".unshift('arg'), unlike the push method, the unshift method adds an element at the start of an existing array. Takes in one argument that corresponds to the element to be added.",
                    "pop": ".pop() removes the last element of an array.",
                    "concat": "arrayOne.concat(arrayTwo) this joins two arrays together, as demonstrated in the syntax example, arrayTwo is added at the end of arrayOne once concat is used. A new array is returned."
                },
                "stringMethods": {
                    "replace": ".replace('old', 'new') replaces a specified string with a new one, as indicated by the two arguments it takes.",
                    "toUpperCase": ".toUpperCase() converts a string to all upper case.",
                    "toLowerCase": ".toLowerCase() converts a string to all lower case."
                },
                "objectMethods": {}
            }
        },
        "operators": {
            "add": "Use plus (+) sign to add 2 numerical values.",
            "subtract": "Use minus (-) sign to subtract 2 numerical values.",
            "divide": "Use forward slash (/) to divide 2 numerical values.",
            "multiply": "Use asterisk (*) to multiply 2 numerical values.",
            "modulus": "The modulus or modulo operater, denoted by percent (%) sign, returns the remainder of a division of 2 numerical values.",
            "comparisonOperators": {
                "looseEquality": "Use double equal sign '==' to see if two values are equal (regardless of the data type). For example, let's declar two variables: var a = 10; var b = '10'; If we compare the equality of these two variables using two equal signs, we expect a 'true' result or output. (i.e. console.log(a == b) // returns true). Only the VALUES of the variables are compared.",
                "strictEquality": "Use strict literal denoted by using 3 equal signs '===' to see if the value AND the data type are equal. In the example above, console.log(a === b) would return false.",
                "looseInequality": "Use exclamation point before 1 equal sign (!=) to test for inequality of the values. Again, this only looks at the values and not the data types.",
                "strictInequality": "Use exclamation point before 2 equal signs (!==) to test for inequality of the values AND the data type.",
                "greaterThan": ">",
                "greaterThanOrEqual": ">=",
                "lessThan": "<",
                "lessThanOrEqual": "<="
            },
            "logicalOperators": {
                "both": "&& -- returns true only when the expressions grouped are both true",
                "or": "|| -- returns true when one of the expressions is true. Only returns false when all of the expressions are false.",
                "not": "! -- returns the opposite/inverse value"
            }
        }
    },
    "dataTypes": {
        "undefined": "Undefined is a data type that is associated with a variable declared and stored in memory but doesn't have an assigned value. (Stored in memory but not defined)",
        "string": "String is a data type based on text (VARCHAR) including letters and other characters. These are enclosed in either single or double quotes.",
        "number": "Number or numerical data type refers to values associated with numbers (0 - 9). Numerical values do not need quotes around them (Otherwise the data type would be considered a string). Decimal values are allowed in this data type (i.e. 3.14). ",
        "boolean": "Boolean data type only holds 2 different values: true (1) or false (0). These are defined by using the two keywords true and false, all in lowercase. (e.g. var empty = true; )",
        "array": "Use open and close brackets [] to store multiple values and data types, separated by commas. Each value in the array has an index value associated with it. To access (or console.log) a single element in an array, we use the index value of that element enclosed in brackets.",
        "objects": "is a very useful data type that allows us to store data in key value pairs. Use open and close curly braces to write an object. The key is written first, followed by a colon to set a value equal to that key. The value can be of different data types, and one object can have key value pairs that contain different data types. Each key value pair is separated by a comma."
    },
    "other": {
        "if-else": "if () true?",
        "parseInt": "",
        "isNaN": ""
    }
}